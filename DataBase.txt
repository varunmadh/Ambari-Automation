---
- name: installing the postgres
  hosts: db_server
  become: yes
  vars:
    postgres_version: 14
    login_user: postgres
    login_password: postgres
  # Ambari DB and User Details
    ambari_db_name: ambari
    ambari_user_name: ambari
    ambari_user_password: ambari
  # Hive DB and User Details
    hive_db_name: hive
    hive_user_name: hive
    hive_user_password: hive
   # Ranger DB and User Details
    ranger_db_name: ranger
    ranger_user_name: ranger
    ranger_user_password: ranger

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes  
    - name: install postgres packages
      ansible.builtin.apt:
        name: 
          - postgresql 
          - postgresql-contrib
        state: present
        update_cache: yes  
    - name:  PostgreSQL is started and enabled at boot
      service:
        name: postgresql
        state: started
        enabled: yes
    - name: update pg_hba.conf
      community.postgresql.postgresql_pg_hba:
        dest: /etc/postgresql/{{ postgres_version }}/main/pg_hba.conf
        contype: "{{ item.contype  }}"
        users: "{{ item.users }}"
        source: "{{ item.source }}"
        databases: "{{item.databases}}"
        method: "{{item.method}}"
        create: true
      loop:
        - { contype: "local", users: "ambari", source: "", databases: "all", method: "trust" }
        - { contype: "host", users: "ambari", source: "0.0.0.0/0", databases: "all", method: "trust" }
        - { contype: "host", users: "ambari", source: "::/0", databases: "all", method: "trust" }
      notify:
        - Restart postgresql
  
    - name: Modify the listen_addresses in postgresql.conf
      ansible.builtin.lineinfile:
        path:  /etc/postgresql/{{ postgres_version }}/main/postgresql.conf
        regexp: '^#?listen_addresses'
        line: "listen_addresses = '*'"
        state: present
        backup: yes
      notify:
        - Restart postgresql
    - name: install  python3-psycopg2 packages
      ansible.builtin.apt:
        name:
          - python3-psycopg2
        state: present
        update_cache: yes
    # - name: Set new password for postgres user using psql command
    #   command: >
    #     sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '{{ login_password }}';"
    #   environment:
    #     PGPASSWORD: "{{ login_password }}"  #This allows the psql command to authenticate without prompting for a password.
        
    - name: create a databases for ambari
      community.postgresql.postgresql_db:
        name: "{{ ambari_db_name }}"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost

    - name: Create ambari user
      community.postgresql.postgresql_user:
        name: "{{ ambari_user_name }}"
        password: "{{ ambari_user_password }}"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
# Grant all privileges on ambari to ambari
    - name: Grant all privileges on ambari to ambari user
      community.postgresql.postgresql_privs:
        database: "{{ ambari_db_name }}"
        role: ambari
        privs: ALL
        type: database
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
    - name: create schema for ambari
      community.postgresql.postgresql_schema:
        name: "{{ ambari_db_name }}"
        db: "{{ ambari_db_name }}"
        owner: ambari
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
    - name: Set search path for ambari user
      community.postgresql.postgresql_query:
        db: "{{ ambari_db_name }}"
        query: "ALTER ROLE ambari SET search_path TO 'ambari', 'public';"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
###############  hive database and user creation ##############
    - name: create a databases for hive
      community.postgresql.postgresql_db:
        name: "{{ hive_db_name }}"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
    - name: Create hive user
      community.postgresql.postgresql_user:
        name: "{{ hive_user_name }}"
        password: "{{ hive_user_password }}"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
    # Grant all privileges on hive to hive
    - name: Grant all privileges on hive to hive user
      community.postgresql.postgresql_privs:
        database: "{{ hive_db_name }}"
        role: hive
        privs: ALL
        type: database
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
    - name: create schema for hive
      community.postgresql.postgresql_schema:
        name: "{{ hive_db_name }}"
        db: "{{ hive_db_name }}"
        owner: hive
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
    - name: Set search path for hive user
      community.postgresql.postgresql_query:
        db: "{{ hive_db_name }}"
        query: "ALTER ROLE hive SET search_path TO 'hive', 'public';"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
###############  ranger database and user creation ##############
    - name: create a databases for ranger
      community.postgresql.postgresql_db:
        name: "{{ ranger_db_name }}"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
    - name: Create ranger user
      community.postgresql.postgresql_user:
        name: "{{ ranger_user_name }}"
        password: "{{ ranger_user_password }}"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
# Grant all privileges on ranger to ranger
    - name: Grant all privileges on ranger to ranger user
      community.postgresql.postgresql_privs:
        database: "{{ ranger_db_name }}"
        role: ranger
        privs: ALL
        type: database
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
    - name: create schema for ranger
      community.postgresql.postgresql_schema:
        name: "{{ ranger_db_name }}"
        db: "{{ ranger_db_name }}"
        owner: ranger
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
        state: present
    - name: Set search path for ranger user
      community.postgresql.postgresql_query:
        db: "{{ ranger_db_name }}"
        query: "ALTER ROLE ranger SET search_path TO 'ranger', 'public';"
        login_user: "{{ login_user }}"
        login_password: "{{ login_password }}"
        login_host: localhost
    - name: Run the sql script 
      ansible.builtin.command: >
        sudo psql PGPASSWORD='{{ ambari_user_password }}' -f Ambari-DDL-Postgres-CREATE.sql -U '{{ ambari_user_name }}' -p 5432 -d '{{ ambari_db_name }}'
      register: check_status  
    - name: Debug - Print the table check result
      debug:
         msg: "{{ check_status.stdout }}"

  handlers:
    - name: Restart postgresql
      ansible.builtin.service:
        name: postgresql
        state: restarted
        enabled: yes  